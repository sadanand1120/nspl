{
    "domain": {
        "objects": [
            "barricade",
            "board",
            "bush",
            "car",
            "entrance",
            "person",
            "pole",
            "staircase",
            "tree",
            "wall"
        ],
        "terrains": [
            "bricks",
            "grass",
            "road",
            "sidewalk",
            "speedway",
            "tiles"
        ]
    },
    "program_sketch": "def is_safe(pixel_loc):\n    if is_on(pixel_loc, 'sidewalk'):\n        if is_far_away_from(pixel_loc, 'person') and not is_in_front_of(pixel_loc, 'entrance') and not is_in_the_way(pixel_loc) and is_far_away_from(pixel_loc, 'bush') and is_far_away_from(pixel_loc, 'barricade') and is_far_away_from(pixel_loc, 'tree') and is_far_away_from(pixel_loc, 'pole') and is_far_away_from(pixel_loc, 'board') and is_far_away_from(pixel_loc, 'car') and not is_in_front_of(pixel_loc, 'staircase') and not is_in_the_way_of_merger(pixel_loc, 'road', 'speedway') and not is_inclined(pixel_loc, ??):\n            return True\n    elif is_on(pixel_loc, 'speedway'):\n        if not is_close_to(pixel_loc, 'board') and not is_in_the_way(pixel_loc) and not is_in_the_way_of_merger(pixel_loc, 'road', 'speedway') and not is_inclined(pixel_loc, ??):\n            return True\n    elif is_on(pixel_loc, 'tiles'):\n        if not is_in_front_of(pixel_loc, 'entrance') and is_far_away_from(pixel_loc, 'wall') and not is_in_the_way(pixel_loc) and not is_in_the_way_of_merger(pixel_loc, 'road', 'speedway') and not is_inclined(pixel_loc, ??):\n            return True\n    return False",
    "ldips_func_program_sketch": "def is_safe(pixel_loc):\n    if terrain(pixel_loc) == 0:  # 'sidewalk'\n        if distance_to_person(pixel_loc) > ?? and frontal_distance_entrance(pixel_loc) > ?? and in_the_way(pixel_loc) == 0 and distance_to_bush(pixel_loc) > ?? and distance_to_barricade(pixel_loc) > ?? and distance_to_tree(pixel_loc) > ?? and distance_to_pole(pixel_loc) > ?? and distance_to_board(pixel_loc) > ?? and distance_to_car(pixel_loc) > ?? and frontal_distance_staircase(pixel_loc) > ?? and in_the_way(pixel_loc) == 0 and slope(pixel_loc) < ??:\n            return True\n    elif terrain(pixel_loc) == 2:  # 'speedway'\n        if distance_to_board(pixel_loc) > ?? and in_the_way(pixel_loc) == 0 and in_the_way(pixel_loc) == 0 and slope(pixel_loc) < ??:\n            return True\n    elif terrain(pixel_loc) == 3:  # 'tiles'\n        if frontal_distance_entrance(pixel_loc) > ?? and distance_to_wall(pixel_loc) > ?? and in_the_way(pixel_loc) == 0 and in_the_way(pixel_loc) == 0 and slope(pixel_loc) < ??:\n            return True\n    return False",
    "predicate_library": {
        "docstrings": {
            "is_far_away_from(pixel_loc: Tuple[int, int], 'person': str, alpha: float) -> bool": "Returns True if the pixel location is far from, according to the parameter, the nearest person",
            "is_on(pixel_loc: Tuple[int, int], 'sidewalk': str) -> bool": "Returns True if the pixel location is on the sidewalk",
            "is_in_the_way(pixel_loc: Tuple[int, int]) -> bool": "Returns True if the pixel location is obstructing the path, based on the available fundamental predicates",
            "is_in_front_of(pixel_loc: Tuple[int, int], 'entrance': str) -> bool": "Returns True if the pixel location is in front of the nearest entrance, based on the available fundamental predicates",
            "is_close_to(pixel_loc: Tuple[int, int], 'car': str, alpha: float) -> bool": "Returns True if the pixel location is close to, according to the parameter, the nearest car",
            "is_inclined(pixel_loc: Tuple[int, int], alpha: float) -> bool": "Returns True if the slope at the pixel location is greater than the parameter alpha, based on the available fundamental predicates"
        },
        "codestrings": {
            "is_far_away_from(pixel_loc: Tuple[int, int], 'person': str, alpha: float) -> bool": "def is_far_away_from(pixel_loc: Tuple[int, int], 'person': str, alpha: float) -> bool:\n    \"\"\"Returns True if the pixel location is far from, according to the parameter, the nearest person\"\"\"\n    loc = project_pixel_to_map(pixel_loc)\n    distance = distance_to_nearest_object(loc, 'person')\n    return distance > alpha",
            "is_on(pixel_loc: Tuple[int, int], 'sidewalk': str) -> bool": "def is_on(pixel_loc: Tuple[int, int], 'sidewalk': str) -> bool:\n    \"\"\"Returns True if the pixel location is on the sidewalk\"\"\"\n    return terrain_at(pixel_loc) == 'sidewalk'",
            "is_in_the_way(pixel_loc: Tuple[int, int]) -> bool": "def is_in_the_way(pixel_loc: Tuple[int, int]) -> bool:\n    \"\"\"Returns True if the pixel location is obstructing the path, based on the available fundamental predicates\"\"\"\n    if not is_a_terrain(pixel_loc):\n        return True\n    terrain = terrain_at(pixel_loc)\n    if not is_traversable(terrain):\n        return True\n    return False",
            "is_in_front_of(pixel_loc: Tuple[int, int], 'entrance': str) -> bool": "def is_in_front_of(pixel_loc: Tuple[int, int], 'entrance': str) -> bool:\n    \"\"\"Returns True if the pixel location is in front of the nearest entrance, based on the available fundamental predicates\"\"\"\n    loc = project_pixel_to_map(pixel_loc)\n    distance = distance_to_nearest_object(loc, 'entrance')\n    return distance < 0",
            "is_close_to(pixel_loc: Tuple[int, int], 'car': str, alpha: float) -> bool": "def is_close_to(pixel_loc: Tuple[int, int], 'car': str, alpha: float) -> bool:\n    \"\"\"Returns True if the pixel location is close to, according to the parameter, the nearest car\"\"\"\n    loc = project_pixel_to_map(pixel_loc)\n    return distance_to_nearest_object(loc, 'car') <= alpha",
            "is_inclined(pixel_loc: Tuple[int, int], alpha: float) -> bool": "def is_inclined(pixel_loc: Tuple[int, int], alpha: float) -> bool:\n    \"\"\"Returns True if the slope at the pixel location is greater than the parameter alpha, based on the available fundamental predicates\"\"\"\n    loc = project_pixel_to_map(pixel_loc)\n    slope = slope_at(loc)\n    return slope > alpha"
        }
    }
}